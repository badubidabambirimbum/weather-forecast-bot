import pandas as pd
from datetime import datetime
import psycopg2
from psycopg2.extras import RealDictCursor
from telegram_constants import *


def create_connect(host, port, user, password, database):
    '''–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'''

    connection = None
    try:
        connection = psycopg2.connect(
            host=host,
            port=port,
            user=user,
            password=password,
            database=database,
        )
        connect_text = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
    except Exception as ex:
        connect_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {ex}!"

    return connection, connect_text

def view(city, type, connection, schema='prom', key="tail", OrderBy_column='date'):
    '''–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã –ø–æ –≥–æ—Ä–æ–¥—É –∏ —Å–∞–π—Ç—É'''

    table_name = f"t_{city}_{type}"

    query = f"SELECT * FROM {schema}.{table_name} order by {OrderBy_column};"  # SQL-–∑–∞–ø—Ä–æ—Å

    df = pd.read_sql_query(query, connection)
    df.set_index('date', inplace=True)

    if key == "tail":
        return df.tail()
    elif key == "head":
        return df.head()
    elif key == "all":
        return df
    else:
        raise KeyError("key Error!")


def create_forecast(city, dist, period, connection):
    '''—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º'''

    forecast_Yandex = view(TRANSLATE_CITIES[city], "Yandex", connection, key='all').iloc[-1]
    forecast_GisMeteo = view(TRANSLATE_CITIES[city], "GisMeteo", connection, key='all').iloc[-1]
    date_forecast = view(TRANSLATE_CITIES[city], "GisMeteo", connection, key='all').index[-1]

    future_dates = pd.date_range(start=date_forecast, periods=period)
    forecast_data = ""

    for i in range(1, int(dist) + 1):
        date = future_dates[i - 1]
        if (forecast_Yandex[f'weather{i}'] in WEATHER_YANDEX_SMILE and
                forecast_GisMeteo[f'weather{i}'] in WEATHER_GISMETEO_SMILE):
            if WEATHER_YANDEX_SMILE[forecast_Yandex[f'weather{i}']] == WEATHER_GISMETEO_SMILE[forecast_GisMeteo[f'weather{i}']]:
                forecast_data += (f"\n"
                                  f"‚ú® {date.strftime('%Y-%m-%d')} ‚ú®\n"
                                  f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> ‚¨áÔ∏è <b>{str(forecast_Yandex[f'night{i}'])}¬∞</b> ‚¨ÜÔ∏è <b>{str(forecast_Yandex[f'day{i}'])}¬∞</b>\n"
                                  f"üî∏<b>Yandex</b> –∏ üîπ<b>GisMeteo</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç {WEATHER_GISMETEO_SMILE[forecast_GisMeteo[f'weather{i}']]}\n")
            else:
                forecast_data += (f"\n"
                                  f"‚ú® {date.strftime('%Y-%m-%d')} ‚ú®\n"
                                  f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> ‚¨áÔ∏è <b>{str(forecast_Yandex[f'night{i}'])}¬∞</b> ‚¨ÜÔ∏è <b>{str(forecast_Yandex[f'day{i}'])}¬∞</b>\n "
                                  f"üî∏<b>Yandex</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {WEATHER_YANDEX_SMILE[forecast_Yandex[f'weather{i}']]}\n "
                                  f"üîπ<b>GisMeteo</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {WEATHER_GISMETEO_SMILE[forecast_GisMeteo[f'weather{i}']]}\n")
        else:
            forecast_data += (f"\n"
                              f"‚ú® {date.strftime('%Y-%m-%d')} ‚ú®\n"
                              f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> ‚¨áÔ∏è <b>{str(forecast_Yandex[f'night{i}'])}¬∞</b> ‚¨ÜÔ∏è <b>{str(forecast_Yandex[f'day{i}'])}¬∞</b>\n "
                              f"üî∏<b>Yandex</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {forecast_Yandex[f'weather{i}']}\n "
                              f"üîπ<b>GisMeteo</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {forecast_GisMeteo[f'weather{i}']}\n")

    return forecast_data