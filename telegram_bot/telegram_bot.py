import time

from aiogram import Bot, types, Dispatcher, executor
from secret.auth_data import *  # API KEY, ADMIN ID, LOG ID, ...
from telegram_constants import *
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from Keyboards import kb, kb_help, kb_cities, ikb_info
from datetime import datetime
import pandas as pd
import asyncio
import pymysql

import sys
import os

import parsing_LTE as table 

time.sleep(300) # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ë–î

bot = Bot(token)
dp = Dispatcher(bot)

try:
    connection = pymysql.connect(
        host=host,
        port=port,
        user=user,
        password=password,
        database=database,
        charset="utf8mb4",
        cursorclass=pymysql.cursors.DictCursor
    )
    print('successfully connected...')
    connect_text = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
except Exception as ex:
    print("Connection refused...")
    print(ex)
    connect_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {ex}!"

scheduler_async = AsyncIOScheduler()


def create_forecast(city, dist, period):
    forecast_Yandex = table.view(TRANSLATE_CITIES[city], "Yandex", connection, key='all').iloc[-1]
    forecast_GisMeteo = table.view(TRANSLATE_CITIES[city], "GisMeteo", connection, key='all').iloc[-1]
    date_forecast = table.view(TRANSLATE_CITIES[city], "GisMeteo", connection, key='all').index[-1]

    future_dates = pd.date_range(start=date_forecast, periods=period)
    forecast_data = ""

    for i in range(1, int(dist) + 1):
        date = future_dates[i - 1]
        if (forecast_Yandex[f'weather{i}'] in WEATHER_YANDEX_SMILE and
                forecast_GisMeteo[f'weather{i}'] in WEATHER_GISMETEO_SMILE):
            if WEATHER_YANDEX_SMILE[forecast_Yandex[f'weather{i}']] == WEATHER_GISMETEO_SMILE[forecast_GisMeteo[f'weather{i}']]:
                forecast_data += (f"\n"
                                  f"‚ú® {date.strftime('%Y-%m-%d')} ‚ú®\n"
                                  f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> ‚¨áÔ∏è <b>{str(forecast_Yandex[f'night{i}'])}¬∞</b> ‚¨ÜÔ∏è <b>{str(forecast_Yandex[f'day{i}'])}¬∞</b>\n"
                                  f"üî∏<b>Yandex</b> –∏ üîπ<b>GisMeteo</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç {WEATHER_GISMETEO_SMILE[forecast_GisMeteo[f'weather{i}']]}\n")
            else:
                forecast_data += (f"\n"
                                  f"‚ú® {date.strftime('%Y-%m-%d')} ‚ú®\n"
                                  f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> ‚¨áÔ∏è <b>{str(forecast_Yandex[f'night{i}'])}¬∞</b> ‚¨ÜÔ∏è <b>{str(forecast_Yandex[f'day{i}'])}¬∞</b>\n "
                                  f"üî∏<b>Yandex</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {WEATHER_YANDEX_SMILE[forecast_Yandex[f'weather{i}']]}\n "
                                  f"üîπ<b>GisMeteo</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {WEATHER_GISMETEO_SMILE[forecast_GisMeteo[f'weather{i}']]}\n")
        else:
            forecast_data += (f"\n"
                              f"‚ú® {date.strftime('%Y-%m-%d')} ‚ú®\n"
                              f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> ‚¨áÔ∏è <b>{str(forecast_Yandex[f'night{i}'])}¬∞</b> ‚¨ÜÔ∏è <b>{str(forecast_Yandex[f'day{i}'])}¬∞</b>\n "
                              f"üî∏<b>Yandex</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {forecast_Yandex[f'weather{i}']}\n "
                              f"üîπ<b>GisMeteo</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {forecast_GisMeteo[f'weather{i}']}\n")

    return forecast_data


async def add_user(city: str, message: types.Message):

    user_id = message.from_user.id

    # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
    with connection.cursor() as cursor:
        select_sub = "SELECT id FROM subscribers WHERE id = %s;"
        cursor.execute(select_sub, user_id)
        rows = cursor.fetchall()

    if len(rows) == 0:
        with connection.cursor() as cursor:
            add_new_sub = "INSERT INTO subscribers (id_subscribers, id, date, city) VALUES (NULL, %s, %s, %s);"
            cursor.execute(add_new_sub, (user_id, datetime.now().strftime('%Y-%m-%d'), city))
            connection.commit()

        print(f"–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ: {message.from_user.username}")
        await bot.send_message(chat_id=log_id,
                               text=f"‚úÖ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ: {message.from_user.username}",
                               parse_mode='HTML')

        await message.reply("‚úÖ –û—Ç–ª–∏—á–Ω–æ!üòÑ\n"
                            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7Ô∏è‚É£ —É—Ç—Ä–∞ –ø–æ –ú–°–ö –±–æ—Çü§ñ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–µ–Ω—å!üòâ")
    else:
        await message.reply("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ‚ùóÔ∏èÔ∏è")


async def scheduled_notification():
    with connection.cursor() as cursor:
        select_sub = f"SELECT * FROM subscribers;"
        cursor.execute(select_sub)
        rows = cursor.fetchall()
    for row in rows:
        try:
            await bot.send_message(row["id"], text=create_forecast(row["city"], 1, 1), parse_mode='HTML')
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {row['id']}: {e}")
            await bot.send_message(chat_id=log_id,
                                   text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {row['id']}: {e}",
                                   parse_mode='HTML')


async def update_dataset(city=None, type=None):
    if city == None and type == None:
        log_time = f"{datetime.now().date()}\n"
        log_string = f""
        log_count = 0
        for city_ru in SET_CITIES:
            for type in SET_TYPES:
                city = TRANSLATE_CITIES[city_ru]
                try:
                    table.update(city, type, connection)
                    log_string += f"‚úÖ {city} {type} \n"
                    log_count += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞: {e}")
                    log_string += f"‚ùå {city} {type} \n"
                await asyncio.sleep(120)
        await bot.send_message(log_id, text=f"{log_time} {log_count} / 6 \n{log_string}", parse_mode='HTML')
    else:
        try:
            table.update(city, type, connection)
            await bot.send_message(log_id, text=f"‚úÖ {city} {type}", parse_mode='HTML')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await bot.send_message(log_id, text=f"‚ùå {city} {type}", parse_mode='HTML')


async def backup_dataset():
    try:
        table.backup(connection)
        await bot.send_message(log_id, text=f"{datetime.now().date()}\n‚úÖ BACKUP", parse_mode='HTML')
    except Exception as e:
        await bot.send_message(log_id, text=f"{datetime.now().date()}\n‚ùå BACKUP {e}", parse_mode='HTML')


def start_scheduler_async():
    scheduler_async.add_job(scheduled_notification, 'cron', hour=7, minute=0)
    scheduler_async.add_job(backup_dataset, 'cron', hour=4, minute=50)
    scheduler_async.add_job(update_dataset, 'cron', hour=5, minute=0)
    scheduler_async.start()


async def on_startup(_):
    await bot.send_message(log_id, text=f"ü§ñ <b>–∑–∞–ø—É—â–µ–Ω</b>!", parse_mode='HTML')
    await bot.send_message(chat_id=log_id, text=connect_text, parse_mode='HTML')
    if connect_text != f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!":
        sys.exit(0)
    print(f"{datetime.now()} –ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")


async def on_shutdown(_):
    await bot.send_message(log_id, text=f"ü§ñ <b>–≤—ã–∫–ª—é—á–µ–Ω</b>!", parse_mode='HTML')
    if connection:
        connection.close()
    print(f"{datetime.now()} –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")


@dp.message_handler(commands=["start"])
async def start_message(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
    with connection.cursor() as cursor:
        select_sub = f"SELECT id FROM all_users WHERE id = %s;"
        cursor.execute(select_sub, user_id)
        rows = cursor.fetchall()

    if len(rows) == 0:
        with connection.cursor() as cursor:
            add_new_user = "INSERT INTO all_users (id_users, id, username, date) VALUES (NULL, %s, %s, %s);"
            cursor.execute(add_new_user, (user_id, message.from_user.username, datetime.now().strftime('%Y-%m-%d')))
            connection.commit()

        print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}!!!")
        await bot.send_message(chat_id=log_id,
                               text=f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}!!!",
                               parse_mode='HTML')

    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgIAAxkBAAEMj01mp68a2RxE2V-27EZhT1TxljV3zQACjRAAAl_bkUp3Bt1MNp18SzUE",
                           reply_markup=kb_help)
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!üëã \n'
        f'–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã üå¶ –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º —Ç–µ–±—è –≥–æ—Ä–æ–¥–µ! \n'
        f'–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help')


@dp.message_handler(commands=["help"])
async def help_message(message: types.Message):
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker="CAACAgIAAxkBAAEMj1Fmp6-tcw1DpXSWJp3yCkcgTFAy6QACshIAAmD9iUtRNBJT06z1kDUE",
                           reply_markup=ReplyKeyboardRemove())

    text_help = '‚ùì <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑?</b> \n' \
                '<b>1.</b> <i>–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</i> üèô \n' \
                '<b>2.</b> <i>–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π</i> üìÖ \n' \
                '<b>3.</b> <i>–ì–æ—Ç–æ–≤–æ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø—Ä–æ–≥–Ω–æ–∑–æ–º!</i> üòâ \n' \
                ' \n' \
                '‚ùì <b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞?</b> \n' \
                '‚ñ™Ô∏è<i>–í–≤–µ–¥–∏</i> <b>/cities</b> \n' \
                ' \n' \
                '‚ùì <b>–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Å–º–∞–π–ª–∏–∫–∏ –ø–æ–≥–æ–¥—ã?</b> \n' \
                '‚ñ™Ô∏è<i>–í–≤–µ–¥–∏</i> <b>/weather</b> \n' \
                ' \n' \
                '‚ùì <b>–ê —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏‚úâÔ∏è –ø—Ä–æ–≥–Ω–æ–∑–∞?</b> \n' \
                '‚ñ™Ô∏è<i>–ö–æ–Ω–µ—á–Ω–æ! –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –≤–≤–µ–¥–∏</i> <b>+(–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞)</b> \n' \
                '‚ñ™Ô∏è<i>–ü—Ä–∏–º–µ—Ä: +–ú–æ—Å–∫–≤–∞</i> \n' \
                '‚ñ™Ô∏è<i>–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–≤–µ–¥–∏</i> <b>/remove</b> \n' \
                ' \n' \
                '‚ùóÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:</b> \n' \
                '‚ñ™Ô∏è <i>–í–≤–µ–¥–∏</i> <b>/info</b>'

    await bot.send_message(
        chat_id=message.from_user.id,
        text=text_help,
        parse_mode='HTML',
        reply_markup=kb_cities)


@dp.message_handler(commands=["info"])
async def info_message(message: types.Message):
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgEAAxkBAAEMrDFmxDk66eDeDYk0jqiSZvGBeX2klAAC0gMAAuJ5IET7lNR5d0OiyjUE")
    await bot.send_message(chat_id=message.from_user.id,
                           text='–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∞ –Ω–∞ GitHub –ø—Ä–æ–µ–∫—Ç–∞üìÑ –∏ –Ω–∞ –º–æ–π Telegram –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏üìû',
                           reply_markup=ikb_info)


@dp.message_handler(commands=["cities"])
async def cities_message(message: types.Message):
    await message.answer(text=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ ‚ö°Ô∏è", reply_markup=kb)


@dp.message_handler(commands=["weather"])
async def weather_message(message: types.Message):
    mes_ya = "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã üî∏Yandex:\n\n"
    mes_gis = "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã üîπGisMeteo:\n\n"

    for weather in WEATHER_YANDEX_SMILE:
        mes_ya += weather + " " + WEATHER_YANDEX_SMILE[weather] + "\n"
    for weather in WEATHER_GISMETEO_SMILE:
        if weather not in WEATHER_GISMETEO_EXCEPTIONS:
            mes_gis += weather + " " + WEATHER_GISMETEO_SMILE[weather] + "\n"

    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgEAAxkBAAEMj_RmqKuKC9rmnTElJX3QEr-MYpC-cAACXQMAApzteUVTI9qtaJq7kTUE",
                           reply_markup=kb_cities)
    await message.answer(text=mes_ya)
    await message.answer(text=mes_gis)


@dp.message_handler(lambda message: '+–º–æ—Å–∫–≤–∞' == message.text.lower())
async def add_Moscow(message: types.Message):
    await add_user(message.text[1:].capitalize(), message)


@dp.message_handler(lambda message: '+–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä' == message.text.lower())
async def add_Krasnodar(message: types.Message):
    await add_user(message.text[1:].capitalize(), message)


@dp.message_handler(lambda message: '+–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' == message.text.lower())
async def add_Ekaterinburg(message: types.Message):
    await add_user(message.text[1:].capitalize(), message)


@dp.message_handler(commands=["remove"])
async def remove_message(message: types.Message):
    user_id = message.from_user.id

    with connection.cursor() as cursor:
        select_sub = f"SELECT id FROM subscribers WHERE id = %s;"
        cursor.execute(select_sub, user_id)
        rows = cursor.fetchall()

    if len(rows) != 0:

        with connection.cursor() as cursor:
            select_sub = f"DELETE FROM subscribers WHERE id = %s;"
            cursor.execute(select_sub, user_id)
            connection.commit()

        print(f"–û—Ç–ø–∏—Å–∫–∞: {message.from_user.username}")
        await bot.send_message(chat_id=log_id,
                               text=f"‚ùóÔ∏è –û—Ç–ø–∏—Å–∫–∞: {message.from_user.username}",
                               parse_mode='HTML')

        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ! ‚úîÔ∏è")
    else:
        await message.reply("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ‚ùóÔ∏è")


# ADMIN
@dp.message_handler(commands=["admin"])
async def admin_list(message: types.Message):
    user_id = message.from_user.id
    if user_id == admin_id:
        text = (f"<b>/update</b> - <i>–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</i> \n"
                f"<b>/check</b> - <i>–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö</i> \n"
                f"<b>/all_users</b> - <i>—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i> \n"
                f"<b>/subs</b> - <i>—Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É</i> \n"
                f"<b>/off</b> - <i>–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞</i> \n"
                f"<b>/update_all</b> - <i>–æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã</i> \n"
                f"<b>/message_subs</b> - <i>—Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã</i>")
        await bot.send_message(chat_id=admin_id,
                               text=text,
                               parse_mode='HTML')
    else:
        await bot.send_message(chat_id=user_id,
                               text=f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')


# ADMIN
@dp.message_handler(commands=["update"])
async def update_datasets(message: types.Message):
    user_id = message.from_user.id
    if user_id == admin_id:
        text = message.text.split()
        if len(text) == 3:
            if text[1] in SET_CITIES and text[2] in SET_TYPES:
                await update_dataset(TRANSLATE_CITIES[text[1]], text[2])
            else:
                await bot.send_message(chat_id=admin_id,
                                       text=f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n'
                                            f'{SET_CITIES}\n'
                                            f'–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:\n'
                                            f'{SET_TYPES}\n')
        else:
            await bot.send_message(chat_id=admin_id,
                                   text=f'–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: /update city type')
    else:
        await bot.send_message(chat_id=user_id,
                               text=f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')


# ADMIN
@dp.message_handler(commands=["check"])
async def check_datasets(message: types.Message):
    user_id = message.from_user.id
    if user_id == admin_id:
        text = ""
        for type in SET_TYPES:
            for city in SET_CITIES:
                text += f"{len(table.view(TRANSLATE_CITIES[city], type, connection, key='all'))} {city} {type} \n"
        await bot.send_message(chat_id=admin_id,
                               text=text)
    else:
        await bot.send_message(chat_id=user_id,
                               text=f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')


# ADMIN
@dp.message_handler(commands=["all_users"])
async def database_all_users(message: types.Message):
    user_id = message.from_user.id

    if user_id == admin_id:
        with connection.cursor() as cursor:
            select_sub = f"SELECT * FROM all_users;"
            cursor.execute(select_sub)
            rows = cursor.fetchall()
        names = ['id', 'username', 'date']
        text = f"{str(names[0]):^25} {str(names[1]):^25} {str(names[2]):^15} \n"

        for row in rows:
            text += f"{str(row['id']):^10} {str(row['username']):^15} {str(row['date']):<15} \n"

        await bot.send_message(chat_id=admin_id,
                               text=text)
    else:
        await bot.send_message(chat_id=user_id,
                               text=f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')


# ADMIN
@dp.message_handler(commands=["subs"])
async def database_subs(message: types.Message):
    user_id = message.from_user.id

    if user_id == admin_id:
        with connection.cursor() as cursor:
            select_sub = f"SELECT * FROM subscribers;"
            cursor.execute(select_sub)
            rows = cursor.fetchall()
        names = ['id', 'date', 'city']
        text = f"{str(names[0]):^25} {str(names[1]):^25} {str(names[2]):^15} \n"

        for row in rows:
            text += f"{str(row['id']):^10} {str(row['date']):^15} {str(row['city']):<15} \n"

        await bot.send_message(chat_id=admin_id,
                               text=text)
    else:
        await bot.send_message(chat_id=user_id,
                               text=f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')


# ADMIN
@dp.message_handler(commands=["off"])
async def off_bot(message: types.Message):
    user_id = message.from_user.id
    if user_id == admin_id:
        await bot.send_message(log_id, text=f"ü§ñ <b>–≤—ã–∫–ª—é—á–µ–Ω</b>!", parse_mode='HTML')
        connection.close()
        print(f"{datetime.now()} –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")
        sys.exit(0)
    else:
        await bot.send_message(chat_id=user_id,
                               text=f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')


# ADMIN
@dp.message_handler(commands=["update_all"])
async def update_all_datasets(message: types.Message):
    user_id = message.from_user.id
    if user_id == admin_id:
        await update_dataset()
    else:
        await bot.send_message(chat_id=user_id,
                               text=f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')


# ADMIN
@dp.message_handler(commands=["message_subs"])
async def message_for_subs(message: types.Message):
    user_id = message.from_user.id
    if user_id == admin_id:
        await scheduled_notification()
    else:
        await bot.send_message(chat_id=user_id,
                               text=f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')


@dp.message_handler()
async def check_message(message: types.Message):
    ikb = InlineKeyboardMarkup(row_width=3)
    ib1 = InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=message.text + " 1")
    ib2 = InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=message.text + " 3")
    ib3 = InlineKeyboardButton(text="üîü", callback_data=message.text + " 10")
    ikb.add(ib1, ib2, ib3)

    if message.text in SET_CITIES:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞!',
                               reply_markup=ikb)
    else:
        await bot.send_sticker(message.from_user.id,
                               sticker="CAACAgIAAxkBAAEMj1Zmp7BJuY6OS5U-NOvcJoe-vZYHAQACSBEAAsHxIEtc_h1kap2wijUE",
                               reply_markup=kb_help)
        await message.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòî \n'
                            '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–∞–Ω–¥–æ–π /help')


@dp.callback_query_handler()
async def callback_message(callback: types.CallbackQuery):
    await callback.message.delete_reply_markup()
    city, dist = callback.data.split()
    await bot.send_message(callback.from_user.id, text=f'–ü—Ä–æ–≥–Ω–æ–∑ –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {dist} –¥–Ω–µ–π:')
    await bot.send_message(callback.from_user.id, text=create_forecast(city, dist, 10), parse_mode='HTML')


if __name__ == "__main__":
    start_scheduler_async()
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True, on_shutdown=on_shutdown)
