from aiogram import Bot, types, Dispatcher, executor
from auth_data import token  # API KEY
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove
from Keyboards import kb, kb_help, kb_cities, ikb_info
import pandas as pd

import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from parsing.table import table

HELP_COMMAND = """
<b>/start</b> - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
<b>/help</b> - –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
<b>/info</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
<b>/cities</b> - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
<b>/weather</b> - –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"""

WEATHER_YANDEX_SMILE = {'–ì—Ä–æ–∑–∞': "üå©",
                        '–õ–∏–≤–µ–Ω—å': "üåß",
                        '–î–æ–∂–¥—å': "üí¶",
                        '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': '‚õÖ',
                        '–î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π': '‚õà',
                        '–Ø—Å–Ω–æ': '‚òÄ',
                        '–ü–∞—Å–º—É—Ä–Ω–æ': '‚òÅ',
                        '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ': "üå§",
                        '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': "üíß"}

WEATHER_GISMETEO_SMILE = {'–ë–µ–∑–æ–±–ª–∞—á–Ω–æ': "‚òÄ",
                          '–ì—Ä–æ–∑–∞': "üå©",
                          '–î–æ–∂–¥—å': "üí¶",
                          '–õ–∏–≤–µ–Ω—å': "üåß",
                          '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ': "üå§",
                          '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ, –¥–æ–∂–¥—å': "üí¶",
                          '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ, –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞': "‚õà",
                          '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ, –±–µ–∑ –æ—Å–∞–¥–∫–æ–≤': "üå§",
                          '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ, –Ω–µ–±–æ–ª—å—à–æ–π  –¥–æ–∂–¥—å': "üíß",
                          '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ, –Ω–µ–±–æ–ª—å—à–æ–π  –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞': "üíß‚ö°Ô∏è",
                          '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': "üíß",
                          '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': "‚õÖ",
                          '–û–±–ª–∞—á–Ω–æ, –¥–æ–∂–¥—å': "üå•üí¶",
                          '–û–±–ª–∞—á–Ω–æ, –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞': "üå•üí¶Ô∏è‚ö°Ô∏è",
                          '–û–±–ª–∞—á–Ω–æ, –±–µ–∑ –æ—Å–∞–¥–∫–æ–≤': "üå•",
                          '–û–±–ª–∞—á–Ω–æ, –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': "üå•üíß",
                          '–û–±–ª–∞—á–Ω–æ, —Å–∏–ª—å–Ω—ã–π  –¥–æ–∂–¥—å': "üåß",
                          '–û–±–ª–∞—á–Ω–æ, —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞': "‚õà",
                          '–ü–∞—Å–º—É—Ä–Ω–æ': "‚òÅ",
                          '–ü–∞—Å–º—É—Ä–Ω–æ, –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞': "‚òÅüí¶‚ö°Ô∏è",
                          '–ü–∞—Å–º—É—Ä–Ω–æ, —Å–∏–ª—å–Ω—ã–π  –¥–æ–∂–¥—å': "üåß",
                          '–ü–∞—Å–º—É—Ä–Ω–æ, —Å–∏–ª—å–Ω—ã–π  –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞': "‚õà",
                          '–Ø—Å–Ω–æ': "‚òÄ"}

SET_CITIES = {"–ú–æ—Å–∫–≤–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"}

TRANSLATE_CITIES = {"–ú–æ—Å–∫–≤–∞": "Moscow",
                    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "Ekaterinburg",
                    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": "Krasnodar"}

bot = Bot(token)
dp = Dispatcher(bot)
table = table()


async def on_startup(_):
    print("–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")


async def on_shutdown(_):
    print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")


@dp.message_handler(commands=["start"])
async def start_message(message: types.Message):
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgIAAxkBAAEMj01mp68a2RxE2V-27EZhT1TxljV3zQACjRAAAl_bkUp3Bt1MNp18SzUE",
                           reply_markup=kb_help)
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç!üëã \n–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã üå¶ –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º —Ç–µ–±—è –≥–æ—Ä–æ–¥–µ! \n–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help')


@dp.message_handler(commands=["help"])
async def help_message(message: types.Message):
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgIAAxkBAAEMj1Fmp6-tcw1DpXSWJp3yCkcgTFAy6QACshIAAmD9iUtRNBJT06z1kDUE",
                           reply_markup=ReplyKeyboardRemove())
    await message.reply(text='–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞üèô –∏ –≤—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–πüìÖ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥!üòâ', parse_mode='HTML', reply_markup=kb_cities)


@dp.message_handler(commands=["info"])
async def info_message(message: types.Message):
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgEAAxkBAAEMrDFmxDk66eDeDYk0jqiSZvGBeX2klAAC0gMAAuJ5IET7lNR5d0OiyjUE")
    await bot.send_message(chat_id=message.from_user.id,
                           text='–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∞ –Ω–∞ GitHub –ø—Ä–æ–µ–∫—Ç–∞üìÑ –∏ –Ω–∞ –º–æ–π Telegram –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏‚ù§Ô∏è',
                           reply_markup=ikb_info)


@dp.message_handler(commands=["cities"])
async def cities_message(message: types.Message):
    await message.answer(text=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ ‚ö°Ô∏è", reply_markup=kb)


@dp.message_handler(commands=["weather"])
async def weather_message(message: types.Message):
    mes_ya = "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã üî∏Yandex:\n\n"
    mes_gis = "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã üîπGisMeteo:\n\n"
    for weather in WEATHER_YANDEX_SMILE:
        mes_ya += weather + " " + WEATHER_YANDEX_SMILE[weather] + "\n"
    for weather in WEATHER_GISMETEO_SMILE:
        mes_gis += weather + " " + WEATHER_GISMETEO_SMILE[weather] + "\n"
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgEAAxkBAAEMj_RmqKuKC9rmnTElJX3QEr-MYpC-cAACXQMAApzteUVTI9qtaJq7kTUE",
                           reply_markup=kb_cities)
    await message.answer(text=mes_ya)
    await message.answer(text=mes_gis)


@dp.message_handler(commands=["add"])
async def add_mesage(message: types.Message):
    command, *args = message.text.split()

    if args:
        word = ' '.join(args)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add.")


@dp.message_handler()
async def check_message(message: types.Message):
    ikb = InlineKeyboardMarkup(row_width=3)
    ib1 = InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=message.text + " 1")
    ib2 = InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=message.text + " 3")
    ib3 = InlineKeyboardButton(text="üîü", callback_data=message.text + " 10")
    ikb.add(ib1, ib2, ib3)

    if message.text in SET_CITIES:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞!',
                               reply_markup=ikb)
    else:
        await bot.send_sticker(message.from_user.id,
                               sticker="CAACAgIAAxkBAAEMj1Zmp7BJuY6OS5U-NOvcJoe-vZYHAQACSBEAAsHxIEtc_h1kap2wijUE",
                               reply_markup=kb_help)
        await message.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòî \n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–∞–Ω–¥–æ–π /help')


@dp.callback_query_handler()
async def callback_message(callback: types.CallbackQuery):
    await callback.message.delete_reply_markup()

    city, dist = callback.data.split()

    await bot.send_message(callback.from_user.id, f'–ü—Ä–æ–≥–Ω–æ–∑ –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {dist} –¥–Ω–µ–π:')

    forecast_Yandex = table.datasets[TRANSLATE_CITIES[city]]["Yandex"].iloc[-1]
    forecast_GisMeteo = table.datasets[TRANSLATE_CITIES[city]]["GisMeteo"].iloc[-1]
    date_forecast = table.datasets[TRANSLATE_CITIES[city]]["Yandex"].index[-1]

    future_dates = pd.date_range(start=date_forecast, periods=10)
    forecast_data = ""

    for i in range(1, int(dist) + 1):
        date = future_dates[i - 1]
        if forecast_Yandex[f'weather{i}'] in WEATHER_YANDEX_SMILE and forecast_GisMeteo[f'weather{i}'] in WEATHER_GISMETEO_SMILE:
            if WEATHER_YANDEX_SMILE[forecast_Yandex[f'weather{i}']] == WEATHER_GISMETEO_SMILE[forecast_GisMeteo[f'weather{i}']]:
                forecast_data += (f"\n"
                                  f"‚ú® {date.strftime('%Y-%m-%d')} ‚ú®\n"
                                  f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> –æ—Ç <b>{str(forecast_Yandex[f'night{i}'])}</b> –¥–æ <b>{str(forecast_Yandex[f'day{i}'])}</b>\n üî∏<b>Yandex</b> –∏ üîπ<b>GisMeteo</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç {WEATHER_GISMETEO_SMILE[forecast_GisMeteo[f'weather{i}']]}\n")
            else:
                forecast_data += (f"\n"
                                  f"‚ú® {date.strftime('%Y-%m-%d')} ‚ú®\n"
                                  f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> –æ—Ç <b>{str(forecast_Yandex[f'night{i}'])}</b> –¥–æ <b>{str(forecast_Yandex[f'day{i}'])}</b>\n üî∏<b>Yandex</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {WEATHER_YANDEX_SMILE[forecast_Yandex[f'weather{i}']]}\n üîπ<b>GisMeteo</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {WEATHER_GISMETEO_SMILE[forecast_GisMeteo[f'weather{i}']]}\n")
        else:
            print(f"Yandex: {forecast_Yandex[f'weather{i}']}, GisMeteo: {forecast_GisMeteo[f'weather{i}']}")
            forecast_data += (f"\n"
                              f"‚ú® {date.strftime('%Y-%m-%d')} ‚ú®\n"
                              f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> –æ—Ç <b>{str(forecast_Yandex[f'night{i}'])}</b> –¥–æ <b>{str(forecast_Yandex[f'day{i}'])}</b>\n üî∏<b>Yandex</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {forecast_Yandex[f'weather{i}']}\n üîπ<b>GisMeteo</b> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç {forecast_GisMeteo[f'weather{i}']}\n")

    await bot.send_message(callback.from_user.id, text=forecast_data, parse_mode='HTML')


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True, on_shutdown=on_shutdown)
